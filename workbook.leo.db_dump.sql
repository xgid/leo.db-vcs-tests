PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE vnodes(
                gnx primary key,
                head,
                body,
                children,
                parents,
                iconVal,
                statusBits,
                ua);
INSERT INTO vnodes VALUES('xgid.20170316121423.1','Startup',replace('By convention, a Startup node contains settings, scripts, etc.\nthat mostly one wants to have hidden.\n','\n',char(10)),'xgid.20170316121423.2 xgid.20170316121423.3','hidden-root-vnode-gnx',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.2','@button make-sphinx',replace('@language python\nimport os\ntrace = True\ng.cls()\nc.setComplexCommand(''make-sphinx'')\nc.save()\naList = c.rstCommands.rst3()\nif aList:\n    path = g.os_path_finalize_join(g.app.loadDir,''..'',''doc'',''html'')\n    os.chdir(path)\n    if len(aList) > 1: g.execute_shell_commands(''make clean'',trace=trace)\n    g.execute_shell_commands(''make html'',trace=trace)\n    fn = aList[0].h.strip() if len(aList) == 1 else ''leo_toc.html''\n    fn = g.os_path_finalize_join(path,''_build'',''html'',g.os_path_basename(fn))\n    if g.os_path_exists(fn):\n        # Don''t wait for this command to exit!\n        g.execute_shell_commands([''&%s'' % (fn)],trace=trace)\n','\n',char(10)),'','xgid.20170316121423.1',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.3','@settings',replace('**Important**: to take effect, all settings must be descendants of this\n@settings node.\n\n**Note**: This file colors text as reStructuredText by default because of\nthe setting::\n\n    @string target_language = rest\n','\n',char(10)),'xgid.20170316121423.4 xgid.20170316121423.5','xgid.20170316121423.1',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.4','@string target_language = rest',replace('The default language if no @language or @comment is in effect.\n\nValid values are (case is ignored):\n\nactionscript,c,csharp,css,cweb,elisp,html,java,latex,\npascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.','\n',char(10)),'','xgid.20170316121423.3',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.5','For rst3 command','','xgid.20170316121423.6 xgid.20170316121423.7 xgid.20170316121423.8','xgid.20170316121423.3',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.6','@bool rst3_call_docutils = True','# Use False when using Sphinx','','xgid.20170316121423.5',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.7','@bool rst3_write_intermediate_file = True','','','xgid.20170316121423.5',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.8','@string rst3_write_intermediate_extension = .txt','','','xgid.20170316121423.5',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.9','Leo''s cheat sheet',replace('@wrap\n','\n',char(10)),'xgid.20170316121423.10 xgid.20170316121423.14 xgid.20170316121423.15 xgid.20170316121423.16 xgid.20170316121423.17 xgid.20170316121423.18 xgid.20170316121423.19 xgid.20170316121423.20 xgid.20170316121423.23 xgid.20170316121423.31','hidden-root-vnode-gnx',1,4,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.10','Key bindings','','xgid.20170316121423.11 xgid.20170316121423.12 xgid.20170316121423.13','xgid.20170316121423.9',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.11','Selecting outline nodes',replace('When focus is in the outline pane::\n\n    Right-arrow (expand-and-go-right)\n    Left-arrow (contract-or-go-left)\n    Up-arrow (goto-prev-visible) \n    Down-arrow (goto-next-visible)\n    \nRegardless of focus::\n\n    Alt-Home (goto-first-visible-node) \n    Alt-End (goto-last-visible-node)\n    Alt-Right-arrow (expand-and-go-right)\n    Alt-Left-arrow (contract-or-go-left)\n    Alt-Up-arrow (goto-prev-visible) \n    Alt-Down-arrow (goto-next-visible)\n','\n',char(10)),'','xgid.20170316121423.10',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.12','Moving outline nodes',replace('When focus is in the outline::\n\n    Shift-Down-arrow (move-outline-down) \n    Shift-Left-arrow (move-outline-left) \n    Shift-Right-arrow (move-outline-right) \n    Shift-Up-arrow (move-outline-up)\n\nRegardless of focus::\n\n    Alt-Shift-Down-arrow (move-outline-down) \n    Alt-Shift-Left-arrow (move-outline-left) \n    Alt-Shift-Right-arrow (move-outline-right) \n    Alt-Shift-Up-arrow (move-outline-up)\n    Ctrl-D (move-outline-down)\n    Ctrl-L (move-outline-left) \n    Ctrl-R (move-outline-right)\n    Ctrl-U (move-outline-up)\n','\n',char(10)),'','xgid.20170316121423.10',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.13','Moving the cursor',replace('When focus is in any of Leo''s text panes (body pane, log pane, headlines):\n\n    +-------------------+-----------------------+\n    | **Key**           | **Move Cursor**       |\n    +-------------------+-----------------------+\n    | Arrow keys        | one character         |\n    +-------------------+-----------------------+\n    | Ctrl-LeftArrow    | back one word         |\n    +-------------------+-----------------------+\n    | Ctrl-RightArrow   | forward one word      |\n    +-------------------+-----------------------+\n    | Home              | beginning of line     |\n    +-------------------+-----------------------+\n    | End               | end of line           |\n    +-------------------+-----------------------+\n    | Ctrl-Home         | beginning of the body |\n    +-------------------+-----------------------+\n    | Ctrl-End          | end of body           |\n    +-------------------+-----------------------+\n    | PageDown          | down one page         |\n    +-------------------+-----------------------+\n    | PageUp            | up one page           |\n    +-------------------+-----------------------+\n    \nAdding the Shift key modifier to any of the keys above\nmoves the cursor and extends the selected text.\n','\n',char(10)),'','xgid.20170316121423.10',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.14','Executing minibuffer commands',replace('Alt-X puts focus in the minibuffer. Ctrl-G escapes from the minibuffer.\n\nOnce there, you can use tab completion to reduce typing. For example, <Alt-X>open<tab> shows all commands that start with open.\n\nHit <Enter> to run a complete command.\n\nCtrl-P (repeat-complex-command) repeat the last command entered from the minibuffer.\n\nLeo maintains a **command history list** of all minibuffer commands you have entered.\n\nWhen focus is in the minibuffer, UpArrow shows the previous minibuffer command, and DnArrow show the commands before that.\n\nThe body text of an @data history-list *setting node* preloads commands into the command history list, ignoring lines starting with ''#''. For example::\n\n    run-pylint\n    beautify-tree\n    cff\n    sort-lines\n    # show-data\n    check-clones\n    expand-log-pane\n    contract-log-pane','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.15','Frequently used commands',replace('For much more information, see Leo''s Commands Reference: http://leoeditor.com/commands.html\n\nCopy/Paste (text)::\n\n    Ctrl-C (copy-text)\n    Ctrl-K (kill)\n    Ctrl-V (paste-text)\n    Ctrl-X (cut-text)\n    Ctrl-Y (yank)\n    Alt-Y  (yank-pop)\n    kill-...\n\nFiles::\n\n    Ctrl-N (new) \n    Ctrl-O (open-outline)\n    Ctrl-S (save-file) \n    Ctrl-Q (exit-leo)\n\nFocus::\n\n    Alt-T (focus-to-tree) \n    Ctrl-T (toggle-active-pane)\n    Ctrl-Tab (tab-cycle-next)\n    \nHelp::\n\n    Alt-0 (vr-toggle)\n    F1 (help) \n    F11 (help-for-command) \n    F12 (help-for-python)\n    print-bindings\n    print-settings\n    help-for-...\n\nFind/Replace::\n\n    Ctrl-F (search-with-present-options) \n    Shift-Ctrl-R (replace-string)\n    Ctrl-minus (replace-then-find) \n    F3 (find-next) \n    F2 (find-previous)\n    \nMinibuffer::\n\n    Alt-X (full-command)\n    Ctrl-G (keyboard-quit)\n\nNodes::\n\n    Ctrl-I or Insert (insert-node)\n    Ctrl-H (edit-headline)\n    <Return> (when editing a headline) (end-edit-headline)\n    Ctrl-Shift-C (copy-node)\n    Ctrl-Shift-X (cut-node) \n    Ctrl-Shift-V (paste-node) \n    Ctrl-{ (promote)\n    Ctrl-} (demote)\n    Ctrl-M (mark) \n\nUndo::\n\n    Ctrl-Z (undo)\n    Ctrl-Shift-Z (redo)\n','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.16','Leo directives',replace('Directives starting with ''@ in the leftmost column\n    \nFor full details, see Leo''s Directives reference: http://leoeditor.com/directives.html\n\n    @                       # starts doc part\n    @c                      # ends doc part\n    @color\n    @doc                    # starts doc part\n    @killcolor\n    @nocolor\n    @language python\n    @language c\n    @language rest          # restructured text\n    @language plain         # plain text: no syntax coloring.\n    @lineending lineending\n    @pagewidth 100\n    @raw, @end_raw          # @file only.\n    @tabwidth -4            # use spaces\n    @tabwidth 8             # use tabs\n    @nowrap\n    @wrap\n    \nLeading whitespace is allowed (and significant) for::\n\n    @all\n    @others\n    ','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.17','Settings',replace('For documentation see node: "About this file" in leoSettings.leo.\n\n- Key bindings:     @shortcuts\n- Visual settings:  @data qt-gui-plugin-style-sheet\n- Enabling plugins: @enabled-plugins\n\nTo disable a binding for a key, bind it to do-nothing::\n\n    do-nothing = Insert\n    \nThis overrides the following default binding in leoSettings.leo::\n\n    insert-node = Insert\n','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.18','Node types',replace('Supported by Leo''s core:\n\n- @chapters, @chapter\n- @rst, @rst-no-head, @rst-ignore, @rst-ignore-tree\n- @settings\n- @test, @testsetup, @testclass\n- @url\n\nWithin @settings trees:\n\n- @bool, @color, @directory, @encoding, @int\n- @float, @font, @ratio, @path, @string\n- @enabled-plugins\n- @buttons, @commands\n- @menus, @menu, @menuat, @item\n- @openwith, @shortcuts\n\nSupported by plugins:\n\n- bookmarks.py: @bookmarks, @bookmark\n- at_folder.py: @folder\n- at_produce.py: @produce\n- at_view.py: @clip, @strip, @view\n- expfolder.py: @expfolder\n- mod_scripting.py: @button, @command, @script\n- viewrendered.py: @graphics-script, @image, @html, @md, @movie and @svg\n- rss.py: @feed\n\n','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.19','Notable Plugins',replace('See the docstring of these plugins for more details:\n\n- bookmarks.py: Manages URL''s used as bookmarks.\n- contextmenu.py: Brings up context menu when user right-clicks a headline.\n- mod_scripting.py: Supports @button and @command nodes.\n- quicksearch.py: Adds Nav tab for searching.\n- todo.py: Manages to-do lists and simple project management.\n- valuespace.py: Creates an outline-oriented spreadsheet.\n- viewrendered.py: Creates a rendering pane. Automatically loaded by Leo''s help commands.\n','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.20','External files (@<file> nodes)',replace('@<file> nodes create external files:\n\n    @asis <filename>        write only, no sentinels, exact line endings\n    @auto <filename>        recommended\n    @clean <filename>       recommended\n    @edit <filename>        @edit node contains entire file\n    @file <filename>        recommended\n    @nosent <filename>      write only, no sentinels\n\nThis table summarizes the differences between @<file> nodes:\n\n                             Sections &   File data in\n    @<file> kind  Sentinels?  @others?    .leo file?    Notes             \n    ------------  ---------- -----------  ------------  -----\n    @asis            no         no           yes\n    @auto            no         yes          no         1, 2\n    @auto-xx         no         yes          no         1, 2\n    @clean           no         yes          yes     \n    @edit            no         no           no    \n    @file            yes        yes          no\n    @nosent          no         yes          yes\n    \n**Note 1**: @auto nodes read files using language-specific importers.\nBy default, the file''s extension determines the importer:\n\n    Extensions                  Importer\n    ----------                  --------\n    .c, .cc, .c++, .cpp,.cxx    C\n    .cs'', .c#''                  C Sharp\n    .el                         Elisp\n    .h, .h++                    C\n    .html, .htm                 HTML\n    .ini                        Config file\n    .ipynb                      Jupyter notebook\n    .java                       Java\n    .js                         JavaScript\n    .md                         Markdown\n    .org                        Org Mode\n    .otl                        Vim outline\n    .pas                        Pascal\n    .php                        PHP\n    .py, .pyi, .pyw             Python\n    .rest, .rst                 reStructuredText\n    .ts                         TypeScript\n    .xml                        XML\n    \n**Note 2**: You can also specify importers *explicitly* as follows:\n\n    @auto-xxx           Importer\n    ---------           --------\n    @auto-ctext         ctext\n    @auto-markdown      markdown\n    @auto-md            markdown\n    @auto-org           org-mode\n    @auto-org-mode      org-mode\n    @auto-otl           vimoutline\n    @auto-vim-outline   vimoutline\n    @auto-rst           reStructuredText\n    \nFor full details, see Leo''s Directives reference:\nhttp://leoeditor.com/directives.html\n    ','\n',char(10)),'xgid.20170316121423.21 xgid.20170316121423.22','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.21','Path expressions',replace('Within @path and @<file> paths, Leo evaluates ``{{exp}}`` with the the following symbols defined: ``c``, ``g``, ``p``, ``os`` and ``sys``.  For example::\n\n    @file {{os.path.abspath(os.curdir)}}/abc.py\n    \nrefers to the file abc.py in (absolute path of) the current directory.\n','\n',char(10)),'','xgid.20170316121423.20',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.22','Sections',replace('**Section names** have the form::\n\n    << any text, except double closing angle brackets >>\n    \n**Section-definition nodes** have headlines starting with a section name.\n\nLeo performs **expansions** for all @<file> nodes except @asis.\n\nExpansion of @all:\n\n- Leo replaces @all by the *unexpanded* body text of *all* nodes.\n\nExpansion of section names and @others:\n\n- Leo replaces section names in body text by the *expanded*\n  text of the corresponding section definition node.\n  \n- Leo replaces @others with the *expanded* text of all nodes\n  that *aren''t* section-definition nodes.\n','\n',char(10)),'','xgid.20170316121423.20',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.23','Scripting',replace('@wrap\n\nThis section lists the ivars, properties, functions and methods most\ncommonly used in Leo scripts.\n\n**Very important**: use Alt-1 (toggle-autocompleter) and Alt-2\n(toggle-calltips) to recreate these lists as you type.\n\nAs an alternative to this chapter, Jacob Peck has written a more informal scripting tutorial:\nhttp://blog.suspended-chord.info/2014/01/28/intro-to-leo-scripting/','\n',char(10)),'xgid.20170316121423.24 xgid.20170316121423.25 xgid.20170316121423.26 xgid.20170316121423.27 xgid.20170316121423.28 xgid.20170316121423.29 xgid.20170316121423.30','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.24','Pre-defined symbols',replace('execute-script predefines::\n\n    c: The commander of the present outline.\n    g: The leo.core.leoGlobals module.\n    p: The presently selected position, c.p.\n    \n@test scripts predefine all the above, plus::\n\n    self: The instance of unittest.TestCase\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.25','LeoApp class',replace('Ivars:\n\n    g.app                   A LeoApp instance.\n    g.app.gui               A LeoGui instance. \n    g.app.pluginsController A LeoPluginsController instance.\n    g.app.*                 Leo''s global variables.\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.26','Commands class',replace('Ivars:\n\n    c.config                c''s configuration object\n    c.frame                 c''s outer frame, a leoFrame instance.\n    c.undoer                c''s undo handler.\n    c.user_dict             A temporary dict for use of scripts and plugins.\n    \nSubCommanders:\n\n    # in leo/core...\n    c.atFileCommands\n    c.chapterController\n    c.fileCommands\n    c.findCommands\n    c.importCommands\n    c.keyHandler = c.k\n    c.persistenceController\n    c.printingController\n    c.rstCommands\n    c.shadowController\n    c.tangleCommands\n    c.testManager\n    c.vimCommands\n\n    # In leo/commands...\n    c.abbrevCommands\n    c.controlCommands\n    c.convertCommands\n    c.debugCommands\n    c.editCommands\n    c.editFileCommands\n    c.gotoCommands\n    c.helpCommands\n    c.keyHandlerCommands\n    c.killBufferCommands\n    c.rectangleCommands\n    c.spellCommands\n    \nFor example, c.k is an instance of the LeoKeys class in leo/core/leoKeys.py.\n    \nGenerators:\n\n    c.all_positions()\n    c.all_unique_positions()\n    \nNew in Leo 5.5: All generators yield distinct positions.\n    \nMost useful methods:\n\n    c.isChanged()\n    c.deletePositionsInList(aList, callback=None)\n                            # safely deletes all the positions in aList.\n    c.positionExists(p)\n    c.redraw(p=None)        # Redraw the screen. Select p if given.\n    c.save()                # Save the present outline.\n    c.selectPosition()\n    \n**Official ivars** of any leoFrame f:\n\n    f.c                     is the frame’s commander.\n    f.body                  is a leoBody instance.\n    f.body.bodyCtl          is a leoQTextEditWidget instance.\n    f.body.bodyCtrl.widget  is a LeoQTextBrowser(QTextBrowser) instance.\n    f.log                   is a leoLog instance.\n    f.tree                  is a leoQtTree instance.\n    f.tree.treeWidget       is a LeoQTreeWidget (a QTreeWidget) instance.\n    \nUse autocompletion to explore these objects!\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.27','VNode class',replace('Ivars:\n\n    v.b:    v''s body text.\n    v.gnx:  v''s gnx.\n    v.h:    v''s headline text.\n    v.u:    v.unknownAttributes, a persistent Python dictionary.\n    \nv.u (uA''s or unknownAttributes or userAttributes) allow plugins or scripts\nto associate persistent data with vnodes. For details see:\nhttp://leoeditor.com/customizing.html#adding-extensible-attributes-to-nodes-and-leo-files\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.28','Position class',replace('**Properties**:\n\n    p.b: same as p.v.b.\n    p.h: same as p.v.h.\n    p.u: same as p.v.u.\n    \n**Generators**:\n\n    p.children()\n    p.parents()\n    p.self_and_parents()\n    p.self_and_siblings()\n    p.following_siblings()\n    p.subtree()\n    p.self_and_subtree()\n    \nNew in Leo 5.5: All generators yield distinct positions.\n\n**Getters**:\n\n    p.back()\n    p.children()\n    p.firstChild()\n    p.hasBack()\n    p.hasChildren()\n    p.hasNext()\n    p.hasParent()\n    p.hasThreadBack()\n    p.hasThreadNext()\n    p.isAncestorOf(p2)\n    p.isAnyAtFileNode()\n    p.isAt...Node()\n    p.isCloned()\n    p.isDirty()\n    p.isExpanded()\n    p.isMarked()\n    p.isRoot()\n    p.isVisible()\n    p.lastChild()\n    p.level()\n    p.next()\n    p.nodeAfterTree()\n    p.nthChild()\n    p.numberOfChildren()\n    p.parent()\n    p.parents()\n    p.threadBack()\n    p.threadNext()\n    p.visBack()\n    p.visNext()\n    \n**Setters**:\n\n    p.setDirty()\n    p.setMarked()\n\n**Operations on nodes**:\n\n    p.clone()\n    p.contract()\n    p.doDelete(new_position)\n    p.expand()\n    p.insertAfter()\n    p.insertAsNthChild(n)\n    p.insertBefore()\n    p.moveAfter(p2)\n    p.moveToNthChildOf(parent,n)\n    p.moveToRoot(oldRoot=None)\n        # oldRoot **must** be the old root position if it exists.\n        \n**Moving positions**:\n\nThe following move positions *themselves*: they change the node to which a\nposition refers. They do *not* change outline structure in any way! Use\nthese when generators are not flexible enough::\n\n    p.moveAfter(p2)\n    p.moveToBack()\n    p.moveToFirstChild()\n    p.moveToFirstChildOf(p2)\n    p.moveToLastChild()\n    p.moveToLastChildOf(p2)\n    p.moveToLastNode()\n    p.moveToNext()\n    p.moveToNodeAfterTree(p2)\n    p.moveToNthChild()\n    p.moveToNthChildOf(p2)\n    p.moveToParent()\n    p.moveToRoot()\n    p.moveToThreadBack()\n    p.moveToThreadNext()\n    p.moveToVisBack(c)\n    p.moveToVisNext(c)\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.29','The leoGlobals module',replace('For full details, see @file leoGlobals.py in LeoPyRef.leo.\n\n**g vars**:\n\n    g.app\n    g.app.gui\n    g.app.windowlist\n    g.unitTesting\n    g.user_dict  # a temporary dict for use of scripts and plugins.\n    \n**g decorator**:\n\n    @g.command(command-name)\n    \n**g functions** (the most interesting: there are many more in leoGlobals.py):\n    \n    g.angleBrackets()\n    g.app.commanders()\n    g.app.gui.guiName()\n    g.es(*args,**keys)\n    g.es_print(*args,**keys)\n    g.es_exception()\n    g.getScript(c,p,\n        useSelectedText=True,\n        forcePythonSentinels=True,\n        useSentinels=True)\n    g.openWithFileName(fileName,old_c=None,gui=None)\n    g.os_path_... # Wrappers for os.path methods.\n    g.pdb(message='''')\n    g.toEncodedString(s,encoding=''utf-8'',reportErrors=False)\n    g.toUnicode(s, encoding=''utf-8'',reportErrors=False)\n    g.trace(*args,**keys)\n    g.warning(*args,**keys)\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.30','Test driven development',replace('- Use imp.reload to reload all changed modules.\n- Make sure to *instantiate* any changed objects.\n- See "Unit testing with Leo" for full details.\n','\n',char(10)),'','xgid.20170316121423.23',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.31','Command line options',replace('Usage: launchLeo.py [options] file1, file2, ...\n    \n    Options:\n      -h, --help            show this help message and exit\n      --debug               enable debug mode\n      --diff                use Leo as an external git diff\n      --fullscreen          start fullscreen\n      --ipython             enable ipython support\n      --fail-fast           stop unit tests after the first failure\n      --gui=GUI             gui to use (qt/qttabs)\n      --load-type=LOAD_TYPE\n                            @<file> type for loading non-outlines from command\n                            line\n      --maximized           start maximized\n      --minimized           start minimized\n      --no-cache            disable reading of cached files\n      --no-plugins          disable all plugins\n      --no-splash           disable the splash screen\n      --screen-shot=SCREENSHOT_FN\n                            take a screen shot and then exit\n      --script=SCRIPT       execute a script and then exit\n      --script-window=SCRIPT_WINDOW\n                            open a window for scripts\n      --select=SELECT       headline or gnx of node to select\n      --session-restore     restore previously saved session tabs at startup\n      --session-save        save session tabs on exit\n      --silent              disable all log messages\n      --trace-plugins       trace imports of plugins\n      -v, --version         print version number and exit\n      --window-size=WINDOW_SIZE\n                            initial window size (height x width)\n','\n',char(10)),'','xgid.20170316121423.9',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.32','The rst3 tutorial',replace('Here is an expanded version of the example from\nhttp://leoeditor.com/tutorial-rst3.html\n\nControl-click the URL above to open the page in your browser.\n\nNotes:\n\n1. The Startup node in this file contains the settings for the rst3\n   command. If you use sphinx, **set @bool rst3_call_docutils = False**.\n   \n2. Leo will not create ~/myDocument.html automatically. Only the rst3\n   command does that.\n   \n3. Executing the make-sphinx command will do everything needed to make\n   myDocument.html. The @button make-sphinx node (a child of the Startup\n   node) creates the make-sphinx command.\n   \n4. The node myDocument.html.txt is the intermediate file produced by the\n   rst3 command.\n','\n',char(10)),'xgid.20170316121423.33 xgid.20170316121423.41','hidden-root-vnode-gnx',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.33','@rst ~/myDocument.html',replace('#############\nWar and Peace\n#############\n\n        by Leo Tolstoy/Tolstoi\n        \n        BOOK ONE: 1805\n','\n',char(10)),'xgid.20170316121423.34 xgid.20170316121423.36 xgid.20170316121423.39 xgid.20170316121423.40','xgid.20170316121423.32',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.34','Chapter I',replace('"Well, Prince, so Genoa and Lucca are now just family estates of the\nBuonapartes. But I warn you, if you don''t tell me that this means war, if\nyou still try to defend the infamies and horrors perpetrated by that\nAntichrist--I really believe he is Antichrist--I will have nothing more to\ndo with you and you are no longer my friend, no longer my ''faithful slave'',\nas you call yourself! But how do you do? I see I have frightened you--sit\ndown and tell me all the news."\n\nIt was in July, 1805, and the speaker was the well-known Anna Pavlovna\nScherer, maid of honor and favorite of the Empress Marya Fedorovna. With\nthese words she greeted Prince Vasili Kuragin, a man of high rank and\nimportance, who was the first to arrive at her reception. Anna Pavlovna had\nhad a cough for some days. She was, as she said, suffering from la grippe;\ngrippe being then a new word in St. Petersburg, used only by the elite.\n\n...stuff happens...','\n',char(10)),'xgid.20170316121423.35','xgid.20170316121423.33',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.35','@rst-ignore',replace('You can make whatever notes \nto yourself you like here, \nas these lines won''t appear \nin the output files. :)\n\n','\n',char(10)),'','xgid.20170316121423.34',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.36','@rst-ignore-tree Chapter 2+','Neither this node nor any descendant node will appear in the output file.','xgid.20170316121423.37','xgid.20170316121423.33',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.37','Chapter II',replace('TL;DR\n\n...la femme la plus seduisante de Petersbourg,* ...','\n',char(10)),'xgid.20170316121423.38','xgid.20170316121423.36',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.38','translation','*The most fascinating woman in Petersburg.','','xgid.20170316121423.37',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.39','Chapter XII',replace('From the time the law of Copernicus was discovered and proved, the mere\nrecognition of the fact that it was not the sun but the earth that moves\nsufficed to destroy the whole cosmography of the ancients.\n\n...\n','\n',char(10)),'','xgid.20170316121423.33',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.40','@rst-no-head The End',replace('..  and now we skip to the end of last chapter, while demonstrating use of an\n..  organizer node (a node whose name does not appear in the output document),\n..  and that rst comments appear as html comments (try ''View Source'' on\n..  output.html)\n\nIn the first case it was necessary to renounce the consciousness of an\nunreal immobility in space and to recognize a motion we did not feel; in\nthe present case it is similarly necessary to renounce a freedom that does\nnot exist, and to recognize a dependence of which we are not conscious.\n   \n--- The End ---\n','\n',char(10)),'','xgid.20170316121423.33',0,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.41','~/myDocument.html.txt',replace('.. rst3: filename: ~/myDocument.html\n\n#############\nWar and Peace\n#############\n\n        by Leo Tolstoy/Tolstoi\n        \n        BOOK ONE: 1805\n\nChapter I\n+++++++++\n\n"Well, Prince, so Genoa and Lucca are now just family estates of the\nBuonapartes. But I warn you, if you don''t tell me that this means war,\nif you still try to defend the infamies and horrors perpetrated by\nthat Antichrist--I really believe he is Antichrist--I will have\nnothing more to do with you and you are no longer my friend, no longer\nmy ''faithful slave,'' as you call yourself! But how do you do? I see\nI have frightened you--sit down and tell me all the news."\n\n...stuff happens...\n\nChapter XII\n+++++++++++\n\nFrom the time the law of Copernicus was discovered and proved, the\nmere recognition of the fact that it was not the sun but the earth\nthat moves sufficed to destroy the whole cosmography of the\nancients.\n\n...\n\n.. and now we skip to the end of last chapter, while demonstrating use of an\n    organizer node (a node whose name does not appear in the output document),\n    and that rst comments appear as html comments (try ''View Source'' on\n    output.html)\n\nIn the first case it was necessary to renounce the consciousness\nof an unreal immobility in space and to recognize a motion we did\nnot feel; in the present case it is similarly necessary to renounce\na freedom that does not exist, and to recognize a dependence of\nwhich we are not conscious.\n   \n--- The End ---\n\n','\n',char(10)),'','xgid.20170316121423.32',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.42','Code academy',replace('@language rest\n@wrap\n\nLeo''s Code Academy posts discuss how to do useful things in Leo. The following are distilled from online discussions about Leo''s scripting.','\n',char(10)),'xgid.20170316121423.43 xgid.20170316121423.44 xgid.20170316121423.45 xgid.20170316121423.46','hidden-root-vnode-gnx',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.43','CA: uA''s',replace('uA''s (user Attributes) associate arbitrary data with any vnode. uA''s are dictionaries of dictionaries--an **outer dictionary** and zero or more **inner dictionaries**. The outer dictionary associates plugin names (or Leo''s core) with inner dictionaries. The inner dictionaries carry the actual data.\012\012The v.u or p.v properties get and set uA''s. You can think of p.u as a synonym for p.v.unknownAttributes on both sides of an assignment. For example::\012\012    plugin_name = ''test_plugin''\012    d = p.u.get(plugin_name,{})\012    d [''n''] = 8\012    p.u [plugin_name] = d\012\012p.u is the outer dictionary. p.u.get.(plugin_name, {}) is the inner dictionary. The last line is all that is needed to update the outer dictionary!\012\012It is easy to search for particular uA''s. The following script prints all the keys in the outer-level uA dictionaries:\012\012    for p in c.all_unique_positions():\012        if p.u:\012            print(p.h, sorted(p.u.keys()))\012\012This is a typical usage of Leo''s generators.  Generators visit each position (or node) quickly. Even if you aren''t going to program much, you should be aware of how easy it is to get and set the data in each node. In fact, now would be a great time to read Leo''s Scripting Tutorial again :-) This will allow you to "dream bigger" with Leo.\012\012The following script creates a list of all positions having an icon, that is, an outer uA dict with a ''icon'' key.\012\012    aList = [p.copy() for p in c.all_unique_positions() if ''icon'' in p.u]\012    print(''\n''.join([p.h for p in aList]))\012\012*Important*: If you don''t understand these lines, please study Python''s list comprehensions.  They are incredibly useful. ''\n''.join(aList) is a great idiom to know.  str.join is one of python''s most useful string methods. It converts between lists and strings.\012','\012',char(10)),'','xgid.20170316121423.42',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.44','CA: icons',replace('@language rest\n\nThis script inserts three icons in the current outline node. Running the script again will insert three more::\n\n@language python\n\n    table = (\n        ''edittrash.png'',\n        ''connect_no.png'',\n        ''error.png'',\n    )\n    for icon in table:\n        fn = g.os_path_finalize_join(g.app.loadDir,\n            ''..'', ''Icons'', ''Tango'', ''16x16'', ''status'', icon)\n        if g.os_path_exists(fn):\n            c.editCommands.insertIconFromFile(path=fn)\n        \n@language rest\n        \nThis deletes all icons of the node at position p::\n\n    c.editCommands.deleteNodeIcons(p=p)\n','\n',char(10)),'','xgid.20170316121423.42',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.45','CA: using git',replace('Using Leo’s latest sources from GitHub is highly recommended. Once git is installed, the following gets the latest Leo sources::\n\n    git clone https://github.com/leo-editor/leo-editor.git\n\nThereafter, you can update Leo''s sources with::\n\n    git pull\n\nGit is great in tracking history and reverting unwanted changes. And it has many other benefits.\n\nUsing git is very similar to using bzr or hg or any other SCCS.  To change Leo, you add files, you commit files, and you push files.  That''s about it.\n','\n',char(10)),'','xgid.20170316121423.42',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.46','CA: finding nodes with c.cloneFindByPredicate',replace('@language rest\n\nc.cloneFindByPredicate is a powerful new addition to Leo.  Here is its docstring:\n\n    Traverse the tree given using the generator, cloning all positions for\n    which predicate(p) is True. Undoably move all clones to a new node, created\n    as the last top-level node. Returns the newly-created node. Arguments:\n\n    generator,      The generator used to traverse the tree.\n    predicate,      A function of one argument p returning true if p should be included.\n    failMsg=None,   Message given if nothing found. Default is no message.\n    flatten=False,  True: Move all node to be parents of the root node.\n    iconPath=None,  Full path to icon to attach to all matches.\n    redraw=True,    True: redraw the screen.\n    undo_type=None, The undo/redo name shown in the Edit:Undo menu.\n                    The default is ''clone-find-predicate''\n                    \nFor example, clone-find-all-marked command is essentially:\n    \n@language python\n\n    @cmd(''clone-find-all-marked'')\n    def cloneFindMarked(self, flatten):\n        \n        def isMarked(p):\n            return p.isMarked()\n            \n        self.cloneFindByPredicate(\n            generator = self.all_unique_positions,\n            predicate = isMarked,\n            failMsg = ''nothing found'',\n            flatten = flatten,\n            undoType = ''clone-find-marked'',\n        )\n        \n@language rest\n\nThe predicate could filter on an attribute or *combination* of attributes. For example, the predicate could return p has attributes A and B but *not* attribute C. This instantly gives Leo full database query capabilities. If we then hoist the resulting node we see *all and only* those nodes satisfying the query.\n\nThese following position methods make it easy to skip @ignore trees or @<file> trees containing @all::\n        \n    p.is_at_all()          True if p is an @<file> node containing an @all directive.\n    p.in_at_all()          True if p is in an @<file> tree whose root contains @all.\n    p.is_at_ignore()       True if p is an @ignore node\n    p.in_at_ignore_tree()  True if p is in an @ignore tree.\n\nFor example, here is how to gather only those marked nodes that lie outside any @ignore tree::\n\n@language python\n\n    def isMarked(p):\n        return p.isMarked() and not p.in_at_ignore_tree()\n      \n    c.cloneFindByPredicate(\n        generator = self.all_unique_positions,\n        predicate = isMarked,\n        flatten = flatten,\n        undoType = ''gather-marked'',\n    )\n','\n',char(10)),'','xgid.20170316121423.42',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.47','Scripting',replace('@wrap\n\nThis section lists the ivars, properties, functions and methods most\ncommonly used in Leo scripts.\n\n**Very important**: use Alt-1 (toggle-autocompleter) and Alt-2\n(toggle-calltips) to recreate these lists as you type.\n\nAs an alternative to this chapter, Jacob Peck has written a more informal scripting tutorial:\nhttp://blog.suspended-chord.info/2014/01/28/intro-to-leo-scripting/','\n',char(10)),'xgid.20170316121423.48 xgid.20170316121423.49 xgid.20170316121423.50 xgid.20170316121423.51 xgid.20170316121423.52 xgid.20170316121423.53 xgid.20170316121423.54','hidden-root-vnode-gnx',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.48','Pre-defined symbols',replace('execute-script predefines::\n\n    c: The commander of the present outline.\n    g: The leo.core.leoGlobals module.\n    p: The presently selected position, c.p.\n    \n@test scripts predefine all the above, plus::\n\n    self: The instance of unittest.TestCase\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.49','LeoApp class',replace('Ivars:\n\n    g.app                   A LeoApp instance.\n    g.app.gui               A LeoGui instance. \n    g.app.pluginsController A LeoPluginsController instance.\n    g.app.*                 Leo''s global variables.\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.50','Commands class',replace('Ivars:\n\n    c.config                c''s configuration object\n    c.frame                 c''s outer frame, a leoFrame instance.\n    c.undoer                c''s undo handler.\n    c.user_dict             A temporary dict for use of scripts and plugins.\n    \nSubCommanders:\n\n    # in leo/core...\n    c.atFileCommands\n    c.chapterController\n    c.fileCommands\n    c.findCommands\n    c.importCommands\n    c.keyHandler = c.k\n    c.persistenceController\n    c.printingController\n    c.rstCommands\n    c.shadowController\n    c.tangleCommands\n    c.testManager\n    c.vimCommands\n\n    # In leo/commands...\n    c.abbrevCommands\n    c.controlCommands\n    c.convertCommands\n    c.debugCommands\n    c.editCommands\n    c.editFileCommands\n    c.gotoCommands\n    c.helpCommands\n    c.keyHandlerCommands\n    c.killBufferCommands\n    c.rectangleCommands\n    c.spellCommands\n    \nFor example, c.k is an instance of the LeoKeys class in leo/core/leoKeys.py.\n    \nGenerators:\n\n    c.all_positions()\n    c.all_unique_positions()\n    \nNew in Leo 5.5: All generators yield distinct positions.\n    \nMost useful methods:\n\n    c.isChanged()\n    c.deletePositionsInList(aList, callback=None)\n                            # safely deletes all the positions in aList.\n    c.positionExists(p)\n    c.redraw(p=None)        # Redraw the screen. Select p if given.\n    c.save()                # Save the present outline.\n    c.selectPosition()\n    \n**Official ivars** of any leoFrame f:\n\n    f.c                     is the frame’s commander.\n    f.body                  is a leoBody instance.\n    f.body.bodyCtl          is a leoQTextEditWidget instance.\n    f.body.bodyCtrl.widget  is a LeoQTextBrowser(QTextBrowser) instance.\n    f.log                   is a leoLog instance.\n    f.tree                  is a leoQtTree instance.\n    f.tree.treeWidget       is a LeoQTreeWidget (a QTreeWidget) instance.\n    \nUse autocompletion to explore these objects!\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.51','VNode class',replace('Ivars:\n\n    v.b:    v''s body text.\n    v.gnx:  v''s gnx.\n    v.h:    v''s headline text.\n    v.u:    v.unknownAttributes, a persistent Python dictionary.\n    \nv.u (uA''s or unknownAttributes or userAttributes) allow plugins or scripts\nto associate persistent data with vnodes. For details see:\nhttp://leoeditor.com/customizing.html#adding-extensible-attributes-to-nodes-and-leo-files\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.52','Position class',replace('**Properties**:\n\n    p.b: same as p.v.b.\n    p.h: same as p.v.h.\n    p.u: same as p.v.u.\n    \n**Generators**:\n\n    p.children()\n    p.parents()\n    p.self_and_parents()\n    p.self_and_siblings()\n    p.following_siblings()\n    p.subtree()\n    p.self_and_subtree()\n    \nNew in Leo 5.5: All generators yield distinct positions.\n\n**Getters**:\n\n    p.back()\n    p.children()\n    p.firstChild()\n    p.hasBack()\n    p.hasChildren()\n    p.hasNext()\n    p.hasParent()\n    p.hasThreadBack()\n    p.hasThreadNext()\n    p.isAncestorOf(p2)\n    p.isAnyAtFileNode()\n    p.isAt...Node()\n    p.isCloned()\n    p.isDirty()\n    p.isExpanded()\n    p.isMarked()\n    p.isRoot()\n    p.isVisible()\n    p.lastChild()\n    p.level()\n    p.next()\n    p.nodeAfterTree()\n    p.nthChild()\n    p.numberOfChildren()\n    p.parent()\n    p.parents()\n    p.threadBack()\n    p.threadNext()\n    p.visBack()\n    p.visNext()\n    \n**Setters**:\n\n    p.setDirty()\n    p.setMarked()\n\n**Operations on nodes**:\n\n    p.clone()\n    p.contract()\n    p.doDelete(new_position)\n    p.expand()\n    p.insertAfter()\n    p.insertAsNthChild(n)\n    p.insertBefore()\n    p.moveAfter(p2)\n    p.moveToNthChildOf(parent,n)\n    p.moveToRoot(oldRoot=None)\n        # oldRoot **must** be the old root position if it exists.\n        \n**Moving positions**:\n\nThe following move positions *themselves*: they change the node to which a\nposition refers. They do *not* change outline structure in any way! Use\nthese when generators are not flexible enough::\n\n    p.moveAfter(p2)\n    p.moveToBack()\n    p.moveToFirstChild()\n    p.moveToFirstChildOf(p2)\n    p.moveToLastChild()\n    p.moveToLastChildOf(p2)\n    p.moveToLastNode()\n    p.moveToNext()\n    p.moveToNodeAfterTree(p2)\n    p.moveToNthChild()\n    p.moveToNthChildOf(p2)\n    p.moveToParent()\n    p.moveToRoot()\n    p.moveToThreadBack()\n    p.moveToThreadNext()\n    p.moveToVisBack(c)\n    p.moveToVisNext(c)\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.53','The leoGlobals module',replace('For full details, see @file leoGlobals.py in LeoPyRef.leo.\n\n**g vars**:\n\n    g.app\n    g.app.gui\n    g.app.windowlist\n    g.unitTesting\n    g.user_dict  # a temporary dict for use of scripts and plugins.\n    \n**g decorator**:\n\n    @g.command(command-name)\n    \n**g functions** (the most interesting: there are many more in leoGlobals.py):\n    \n    g.angleBrackets()\n    g.app.commanders()\n    g.app.gui.guiName()\n    g.es(*args,**keys)\n    g.es_print(*args,**keys)\n    g.es_exception()\n    g.getScript(c,p,\n        useSelectedText=True,\n        forcePythonSentinels=True,\n        useSentinels=True)\n    g.openWithFileName(fileName,old_c=None,gui=None)\n    g.os_path_... # Wrappers for os.path methods.\n    g.pdb(message='''')\n    g.toEncodedString(s,encoding=''utf-8'',reportErrors=False)\n    g.toUnicode(s, encoding=''utf-8'',reportErrors=False)\n    g.trace(*args,**keys)\n    g.warning(*args,**keys)\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121423.54','Test driven development',replace('- Use imp.reload to reload all changed modules.\n- Make sure to *instantiate* any changed objects.\n- See "Unit testing with Leo" for full details.\n','\n',char(10)),'','xgid.20170316121423.47',1,0,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170316121502.1','Tests','','xgid.20170320001900.2','hidden-root-vnode-gnx',0,4,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170320001900.2','@clean C:\temp\prueba3.md',replace('Description: Texto\n\nCuerpo\n\n@others\n','\n',char(10)),'xgid.20170320001900.3','xgid.20170316121502.1',1,260,X'80037d71002e');
INSERT INTO vnodes VALUES('xgid.20170320001900.3','Entrada nodo 1',replace('Description: (Te(x)to2)\n\nCuerpo2\n','\n',char(10)),'','xgid.20170320001900.2',1,256,X'80037d71002e');
CREATE TABLE extra_infos(name primary key, value);
INSERT INTO extra_infos VALUES('width',1100);
INSERT INTO extra_infos VALUES('height',824);
INSERT INTO extra_infos VALUES('left',50);
INSERT INTO extra_infos VALUES('top',50);
INSERT INTO extra_infos VALUES('ratio',0.51976573938506587246);
INSERT INTO extra_infos VALUES('secondary_ratio',0.50505050505050508302);
INSERT INTO extra_infos VALUES('current_position','xgid.20170316121502.1,5<->xgid.20170320001900.2,0');
COMMIT;
